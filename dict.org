#+title: Dict API

We would like at least the following to be defined:
- The constant ~empty-dict~
- The constraint ~(assoco key value in-dict out-dict)~
- The constraint ~(lookupo dict key value)~
- The constraint ~(fresho dict key)~
- An ~occurs-check~ case
- An ~absento~ case
- Reifier logic
- (maybe) a unification case
- (maybe) a disunification case

There are two semantics which make immediate sense:
- Dictionaries are distinct from sets
- Dictionaries are sets of pairs with valid domain constraint (no pairs with the same ~car~)

| Set Semantics       | Distinct Semantics               |
|---------------------+----------------------------------|
| Reuse Code          | Faster                           |
| Intuitive Semantics | Better error handling            |
|                     | Better control of implementation |

* Set semantics

If we used a set semantics, we would likely get a few things for free:
- literals
- reifier logic
- ~absento~
- ~occurs-check~
- ~lookupo~ in user-space
- ~assoco~ in user-space

This would also require another choice: do we want to eagerly enforce the domain constraints?
For example: does ~(lookupo (set (cons 1 2) (cons 1 3)) 1 K)~ ever hold?

** Lazy Domain Constraints

~(lookupo (set (cons 1 2) (cons 1 3)) K)~ would hold with ~K = 2~.

If we didn't, we could get a more efficient implementation (we wouldn't have to walk the structure many times), but would likely have to implement custom logic for unification. It also violates the soundness of unification in general.

** Eager Domain Constraints

If we did, we would also get unification for free. The problem is that keeping this constraint in place is /very/ expensive. For example: there are 21,147 ways to populate a 9-key dictionary.

* List semantics

Alternatively, what if we model dictionaries as alists? In theory, all we'd really need would be a freshness constraint: ~assoco~ is just ~cons~. The problem with this is that unification would break. Maybe this is a valuable minimum viable product?

I've now implemented a ~freeo~ constraint, which ensures that an element is not contained in an alist. Will also wants a lazy ~lookupo~ constraint, which seems like it may very quickly explode in complexity, as the eager domain constraints showed.

Suppose, for some variable ~X~, with lookup constraints ~L~ and non-lookup constraints ~N~, we wish to add the lookup constraint that ~A~ map to ~B~. The following are then corollaries:
- ~(listo X)~
- ∀ (K, V) ∈ L, ~(disj (\=/= A K) (== V B))~
- ∀ K ∈ N, ~(\=/= A K)~

If ~X~ were a cons-pair with ~car~ F and ~cdr~ R:
- ~(fresh (K V) (\=\= F (cons K V)) (conde [(\=\= K A) (\=\= V B)] [(\=/\= K A)]))~

* Lazy Association Lists

This branch provides three new constraints:

- The ~(listo l)~ constraint, which declares that ~l~ must be a list
  - It is lazy, meaning the constraint does not force ~l~ to choose between a ~pair?~ or ~null?~ immediately.
  - Like other type constraints, it is disjoint from other types, such as ~sym~, ~set~, ~num~, etc.
- The ~(freeo k a)~ constraint, which declares that ~a~ is an association list which does not bind ~k~
  - It is lazy, meaning the constraint does not force ~a~ to choose between a ~pair?~ or ~null?~ immediately.
  - ~k~ may be of an arbitrary type and ~a~ must be an alist
  - Each element of ~a~ is unified with a pair whose ~car~ is not unifiable with ~k~
- The ~(lookupo k a v)~ constraint, which declares that ~a~ is an association list which binds ~k~ to ~v~
  - It is lazy, meaning the constraint does not force ~a~ to choose between a ~pair?~ or ~null?~ immediately.
  - ~k~ and ~v~ may be of arbitrary types and ~a~ must be an alist
  - The constraint only ever returns the closest binding if there are multiple:

    #+begin_src scheme
      (test "lookup shadowing"
        (run* (q)
          (lookupo 1 '((1 . 2) (1 . 4) (a . b)) q))
        '(2))
    #+end_src
  - If multiple ~lookupo~ constraints are put on the same variable with the same key, their results must unify

    #+begin_src scheme
      (test "partially ground constraints (2)"
        (run* (r p q)
          (lookupo 1 r p)
          (lookupo 1 r q))
        '(((_.0 _.1 _.1) (lst _.0) (lookup (1 _.0 _.1)))))
    #+end_src
  - ~lookupo~ and ~freeo~ should play nicely: any key which is ~free~ on a given alist list cannot have a binding.

    #+begin_src scheme
      (test "lookupo vs free (2)"
        (run* (a b c)
          (lookupo a c b)
          (freeo 1 c))
        '(((_.0 _.1 _.2)
           (=/= ((_.0 1)))
           (lst _.2)
           (free (1 _.2))
           (lookup (_.0 _.2 _.1)))))
    #+end_src
  - ~lookupo~ and ~absento~ should play nicely: if a (potentially lazy) alist is asserted to not contain some value ~q~, then any associations it has cannot contain those values either.

Because these constraints work on ordinary association lists, one can construct association lists as normal: ~(cons (cons k v) a)~ does not force a value on ~a~. Note: it also does not force ~a~ to be a list, as other constraints here do.

#  LocalWords:  reifier alist
