#+title: CLP(Set) API

* Set Construction

The set $\emptyset$ is written either as ~(set)~, ~'#(set)~ ~∅~ or ~empty-set~.
The set $\{p\} \cup T$ is constructed using ~(set-cons p T)~, á la ~cons~.

Note: unlike ~cons~, ~(set-cons p T)~ may be equal to ~T~ if ~p~ is already a member of ~T~.

The set $\{x, y, z, \dots\}$ can also be written ~(set x y z ...)~, á la ~list~, or as ~'#(set (x y z ...))~ (if the elements of the set are quotable).
The set $\{x, y, z, \dots\} \cup T$ can also be written ~(set* x y z ... T)~, á la ~list*~, or as ~'#(set (x y z ...) T)~ (if the elements of the set are quotable).

Set objects themselves are represented in one of three ways:
The set $\emptyset$ is represented as the singleton vector ~'#(set)~.
The set $\{x, y, ...\}$ is represented as the two-vector ~'#(set (x y ...))~
The set $\{x, y, ...\} \cup T$ when represented as ~'#(set (x y z) T)~ if ~T~ is not a set.

For the internal implementation of sets, see: [[file:sets.scm]]

* Set Unification

Set unification is unaffected by duplicates or differences in ordering.
For example, the following sets are all equal:
- ~(set 1 2 3)~
- ~(set 1 1 2 3)~
- ~(set 3 2 1)~
- ~(set 3 2 3 1 1 3)~

* Set Non-Membership

The set-non-membership constraint ~(!ino p q)~ holds IFF ~p~ is not equal to any member of ~q~.

* Set Disjointedness

The set-disjointedness constraint ~(disjo p q)~ holds IFF ~p~ and ~q~ share no elements, or that no element of either set are equal to an element in the other.

* Set Union

The set-union constraint ~(uniono p q r)~ holds IFF ~r~ contains all the members of ~p~ and all the members of ~q~, but no others.

* Recursive Absence on Sets

The recursive absence constraint ~(absento p q)~ holds IFF ~p~ does not occur in any subterm of ~q~ and ~p~ is not itself ~q~.

* Derived Constraints

- The set-membership goal ~(ino p q)~ holds IFF ~(fresh (N) (== q (set-cons p N)))~
- The set-removal goal ~(removeo p q r)~ holds IFF ~(conj (== p (set-cons q r)) (!ino q r))~
- The non-union goal ~(!uniono l r m)~ holds IFF one of:
  - An element of ~m~ is in neither ~l~ nor ~r~
  - An element of ~l~ or ~r~ is not in ~m~
- The subset-equality-constraint ~(subseteqo s b)~ holds IFF ~(uniono s b b)~
